{"ast":null,"code":"import _slicedToArray from \"/Users/vlv/42/matchaChat/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vlv/42/matchaChat/client/src/AuthContext.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nexport const AuthContext = createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  // ISAUTH IS IN CONTEXT TO MAKE THE CONTEXT REFRESH\n  // AND UPDATE SOCKET AUTOMATICALLY\n  const _useState = useState(JSON.parse(sessionStorage.isAuth || \"0\")),\n        _useState2 = _slicedToArray(_useState, 2),\n        isAuth = _useState2[0],\n        setIsAuth = _useState2[1];\n\n  const _useState3 = useState(JSON.parse(sessionStorage.data || null)),\n        _useState4 = _slicedToArray(_useState3, 2),\n        data = _useState4[0],\n        setData = _useState4[1];\n\n  useEffect(() => {\n    sessionStorage.isAuth = JSON.stringify(isAuth);\n    sessionStorage.data = JSON.stringify(data);\n  }, [isAuth, data]); // SOCKET MANAGEMENT\n\n  const socketContext = {};\n\n  if (data && isAuth > 0) {\n    // const session = JSON.parse(sessionStorage.data);\n    const socket = socketIOClient.connect(\"http://localhost:9000\", {\n      transports: [\"polling\"],\n      requestTimeout: 5000,\n      upgrade: false,\n      query: {\n        // token: this.state.userToken\n        // userID: .userID,\n        login: data.login // room_id: this.state.room_id\n\n      }\n    });\n    socketContext.socket = socket;\n  } // console.log(\"socket\", socketContext.socket);\n\n\n  const authContext = {\n    isAuth,\n    setIsAuth,\n    data,\n    setData\n  };\n  return React.createElement(AuthContext.Provider, {\n    value: [socketContext, authContext],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, children);\n}; //   const [socket, setSocket] = React.useState({});\n//   if (sessionStorage.data) {\n//     const endpoint = \"http://localhost:9000\";\n//     const session = JSON.parse(sessionStorage.data);\n//     setSocket(\n//       socketIOClient.connect(endpoint, {\n//         transports: [\"polling\"],\n//         requestTimeout: 5000,\n//         upgrade: false,\n//         query: {\n//           // token: this.state.userToken\n//           // userID: this.state.userID,\n//           login: session.login\n//           // room_id: this.state.room_id\n//         }\n//       })\n//     );\n//     console.log(socket);\n//   return (\n//     <AuthContext.Provider value={[users, setUsers]}>\n//       {props.children}\n//     </AuthContext.Provider>\n//   );\n// };\n// useEffect(() => {\n//     //fetch data from the back to check if the user login and token are valid\n//     //If they are, define the context state like so and connect to socket and add to state\n//     // If not, define the context and send a message error\n//       const authToken = async () => {\n//           const result = await axios.get(\n//             `http://localhost:9000/api/users/verify`\n//           );\n//           if (result.data.length > 0) setAuth(true);\n//           else\n//         }\n//         AuthToken();\n//   });","map":{"version":3,"sources":["/Users/vlv/42/matchaChat/client/src/AuthContext.js"],"names":["React","createContext","useState","useEffect","socketIOClient","AuthContext","AuthProvider","children","JSON","parse","sessionStorage","isAuth","setIsAuth","data","setData","stringify","socketContext","socket","connect","transports","requestTimeout","upgrade","query","login","authContext"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,EAAjC;AAEP,OAAO,MAAMK,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5C;AACA;AAF4C,oBAGhBL,QAAQ,CAClCM,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,MAAf,IAAyB,GAApC,CADkC,CAHQ;AAAA;AAAA,QAGrCA,MAHqC;AAAA,QAG7BC,SAH6B;;AAAA,qBAMpBV,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACG,IAAf,IAAuB,IAAlC,CAAD,CANY;AAAA;AAAA,QAMrCA,IANqC;AAAA,QAM/BC,OAN+B;;AAQ5CX,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,cAAc,CAACC,MAAf,GAAwBH,IAAI,CAACO,SAAL,CAAeJ,MAAf,CAAxB;AACAD,IAAAA,cAAc,CAACG,IAAf,GAAsBL,IAAI,CAACO,SAAL,CAAeF,IAAf,CAAtB;AACD,GAHQ,EAGN,CAACF,MAAD,EAASE,IAAT,CAHM,CAAT,CAR4C,CAa5C;;AACA,QAAMG,aAAa,GAAG,EAAtB;;AAEA,MAAIH,IAAI,IAAIF,MAAM,GAAG,CAArB,EAAwB;AACtB;AAEA,UAAMM,MAAM,GAAGb,cAAc,CAACc,OAAf,CAAuB,uBAAvB,EAAgD;AAC7DC,MAAAA,UAAU,EAAE,CAAC,SAAD,CADiD;AAE7DC,MAAAA,cAAc,EAAE,IAF6C;AAG7DC,MAAAA,OAAO,EAAE,KAHoD;AAI7DC,MAAAA,KAAK,EAAE;AACL;AACA;AACAC,QAAAA,KAAK,EAAEV,IAAI,CAACU,KAHP,CAIL;;AAJK;AAJsD,KAAhD,CAAf;AAWAP,IAAAA,aAAa,CAACC,MAAd,GAAuBA,MAAvB;AACD,GA/B2C,CAiC5C;;;AACA,QAAMO,WAAW,GAAG;AAClBb,IAAAA,MADkB;AAElBC,IAAAA,SAFkB;AAGlBC,IAAAA,IAHkB;AAIlBC,IAAAA;AAJkB,GAApB;AAOA,SACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE,CAACE,aAAD,EAAgBQ,WAAhB,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,QADH,CADF;AAKD,CA9CM,C,CAgDP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  // ISAUTH IS IN CONTEXT TO MAKE THE CONTEXT REFRESH\n  // AND UPDATE SOCKET AUTOMATICALLY\n  const [isAuth, setIsAuth] = useState(\n    JSON.parse(sessionStorage.isAuth || \"0\")\n  );\n  const [data, setData] = useState(JSON.parse(sessionStorage.data || null));\n\n  useEffect(() => {\n    sessionStorage.isAuth = JSON.stringify(isAuth);\n    sessionStorage.data = JSON.stringify(data);\n  }, [isAuth, data]);\n\n  // SOCKET MANAGEMENT\n  const socketContext = {};\n\n  if (data && isAuth > 0) {\n    // const session = JSON.parse(sessionStorage.data);\n\n    const socket = socketIOClient.connect(\"http://localhost:9000\", {\n      transports: [\"polling\"],\n      requestTimeout: 5000,\n      upgrade: false,\n      query: {\n        // token: this.state.userToken\n        // userID: .userID,\n        login: data.login\n        // room_id: this.state.room_id\n      }\n    });\n    socketContext.socket = socket;\n  }\n\n  // console.log(\"socket\", socketContext.socket);\n  const authContext = {\n    isAuth,\n    setIsAuth,\n    data,\n    setData\n  };\n\n  return (\n    <AuthContext.Provider value={[socketContext, authContext]}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n//   const [socket, setSocket] = React.useState({});\n\n//   if (sessionStorage.data) {\n//     const endpoint = \"http://localhost:9000\";\n//     const session = JSON.parse(sessionStorage.data);\n//     setSocket(\n//       socketIOClient.connect(endpoint, {\n//         transports: [\"polling\"],\n//         requestTimeout: 5000,\n//         upgrade: false,\n//         query: {\n//           // token: this.state.userToken\n//           // userID: this.state.userID,\n//           login: session.login\n//           // room_id: this.state.room_id\n//         }\n//       })\n//     );\n//     console.log(socket);\n//   return (\n//     <AuthContext.Provider value={[users, setUsers]}>\n//       {props.children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// useEffect(() => {\n//     //fetch data from the back to check if the user login and token are valid\n//     //If they are, define the context state like so and connect to socket and add to state\n//     // If not, define the context and send a message error\n\n//       const authToken = async () => {\n//           const result = await axios.get(\n//             `http://localhost:9000/api/users/verify`\n//           );\n//           if (result.data.length > 0) setAuth(true);\n//           else\n//         }\n//         AuthToken();\n//   });\n"]},"metadata":{},"sourceType":"module"}